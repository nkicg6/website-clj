#+OPTIONS: toc:t author:nil title:nil date:nil num:nil ^:{} \n:1 todo:nil
#+PROPERTY: header-args :eval never-export


/TODO!/

Use =enliven= to format images. Your find and replace stuff is messing up the code examples. 

 
* Static sites
These are static collections of HTML, CSS, and JavaScript files that make up simple, fast websites. The main difference between static sites and dynamic websites is that static sites do not fetch information from a database upon requests. They simply contain all the HTML, etc. files that make up the website.
* Why?
They are simple and very useful. I don't need anything more complicated for my personal website, and static sites are low maintenance and easy to customize and extend. 
** Why Clojure?
 I am currently learning Clojure, mostly because I wanted to learn functional programming and Rich Hickey gives [[https://github.com/tallesl/Rich-Hickey-fanclub][amazing talks]], but also because it is an functional programming language hosted on both the web with clojurescript (javascript) and the JVM (regular Clojure). Since clojurescript is a clojure trans-piler for javascript, that means that I can use one language to leverage all of javascript and non-web programming or backend web tasks with clojure!
** Why Stasis?
My original website was written with python and the Flask framework and made into a static site with [[https://pythonhosted.org/Frozen-Flask/][Frozen-flask]] and [[https://pythonhosted.org/Flask-FlatPages/][Flask-FlatPages]] for hosting on github pages. I was originally going to port it to Clojure using the Clojure static site generator [[https://github.com/cryogen-project/cryogen][Cryogen]], a clojure/clojurescript static website generator, but I found the templates hard to understand and customization difficult. In the spirit of Clojure (and Tim Ewald's excellent talk [[https://www.youtube.com/watch?v=ShEez0JkOFw][Programming with hand tools]]), I choose to use the [[https://github.com/magnars/stasis][Stasis]], the clojure library for developing (frameworkless) static web sites. I will write about that in this post as I go. 

* Org-mode to html workflow

  I write in Org-mode markup and plan to publish with org-publish, so periodically I will be adding notes for how this all works with my org-mode publishing scheme. These will be under the sub heading =org-workflow= 

* Building the website: basics
  /Disclaimer/ 
I am still very new to Clojure, so my custom code will likely be very beginner-ish and rough, but hopefully it will improve as I go!
 Christian Johansen's post on Building static sites in Clojure with Stasis https://cjohansen.no/building-static-sites-in-clojure-with-stasis/ 

** Style
   After following most of the Christian Johansen's awesome tutorial, the first thing I wanted to do was add [[https://getbootstrap.com/docs/3.3/getting-started/][Twitter Bootstrap]] CSS. I know there is a [[https://github.com/weavejester/hiccup-bootstrap][Hiccup wrapper]] for bootstrap, but since I write in Emacs Org-mode and export to HTML directly, I don't think it is necessary for me. Hiccup looks like simplified HTML, so I changed the name of the function from =layout-page= to =layout-base-header= and added the CDN links from the Bootstrap home page. The function now looks like this:

#+BEGIN_SRC clojure 
  (defn layout-base-header [page]
    (html5
     [:head
      [:meta {:charset "utf-8"}]
      [:meta {:name "viewport"
              :content "width=device-width, initial-scale=1.0"}]
      [:link {:rel "stylesheet" :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" :integrity "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" :crossorigin "anonymous"}]
      [:script {:src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" :integrity "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" :crossorigin "anonymous"}]]
     [:body
      [:div.logo "website-clj"]
      [:div.body page]]))

#+END_SRC

This seems to work great for my =.md= rendered page, but the base page didn't inherit this styling. Looking through the functions I copied from the tutorial, I am betting it is due to the =get-pages= function. When it declares the =:public= map, it doesn't wrap the =stasis/slurp-directory= call in another function. I assume this just renders them raw. So I will modify =markdown-pages= function for HTML pages to see if this takes care of it. 

#+BEGIN_SRC clojure 
  (defn markdown-pages [pages]
    (zipmap (map #(str/replace % #"\.md$" "") (keys pages))
            (map #(layout-base-header (md/to-html %)) (vals pages))))

  (defn html-pages [pages]
    (zipmap (map #(str/replace % #"\.html" "") (keys pages))
            (map #(layout-base-header (vals pages)))))

#+END_SRC

and then I will change =get-pages= to add this function. 

#+BEGIN_SRC clojure 
(defn get-pages []
  (stasis/merge-page-sources
   {:public (html-pages (stasis/slurp-directory "resources/public" #".*\.(html|css|js)$"))
    :partials (partial-pages (stasis/slurp-directory "resources/partials" #".*\.html$"))
    :markdown (markdown-pages (stasis/slurp-directory "resources/md" #".*\.md$"))}))

#+END_SRC
But when I refreshed my webpage, I got this horrible error:

#+BEGIN_EXAMPLE
1. Unhandled java.lang.IllegalArgumentException
   Don't know how to create ISeq from: clojure.core$map$fn__4781
...
#+END_EXAMPLE

and on and on. Well, looks like I have to figure out what these functions are actually doing. 

First, I'll run one that I know works to see what the output looks like:

#+BEGIN_SRC clojure 
(markdown-pages (stasis/slurp-directory "resources/md" #".*\.md$"))
#+END_SRC

#+BEGIN_EXAMPLE
[ "/my-first-md" "<!DOCTYPE html>\n<html><head><meta charset=\"utf-8\"><meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"><link crossorigin=\"anonymous\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" rel=\"stylesheet\"><script crossorigin=\"anonymous\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script></head><body><div class=\"logo\">website-clj</div><div class=\"body\"><h1>first md post</h1><p>Short for now</p></div></body></html>" ]

#+END_EXAMPLE

Cool. but running the following fails:

#+BEGIN_SRC clojure 
(html-pages (stasis/slurp-directory "resources/public" #".*\.html$"))
#+END_SRC

#+BEGIN_EXAMPLE
1. Unhandled java.lang.IllegalArgumentException
   Don't know how to create ISeq from: clojure.core$map$fn__4781
...
#+END_EXAMPLE

That tells me we are returning a function. And now I see we obviously are with the bottom =map= function! =#()= is an anonymous function, so I need to add the argument =%=! 

#+BEGIN_SRC clojure 
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(layout-base-header %) (vals pages))))
;; test
(html-pages (stasis/slurp-directory "resources/public" #".*\.html$"))
#+END_SRC

#+BEGIN_EXAMPLE
[ "/index" "<!DOCTYPE html>\n<html><head><meta charset=\"utf-8\"><meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"><link crossorigin=\"anonymous\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" rel=\"stylesheet\"><script crossorigin=\"anonymous\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script></head><body><div class=\"logo\">website-clj</div><div class=\"body\"><!DOCTYPE html>\n<html>\n  <head>\n    <title>My blog</title>\n  </head>\n  <body>\n    <h1>My blog</h1>\n    <p>\n      Welcome to it.\n    </p>\n  </body>\n</html>\n</div></body></html>" ]

#+END_EXAMPLE

Excellent! Now I will start the app up again and see what happens. 

weird! The landing page can't find it. 
[[file:img/not-found-index.png]]


But when I navigate to =/index=, it is right there and working. 

[[file:img/working-index.png]]

hmm, I will have to see how the home page will be rendered. When I return to Christian's blog, and re-read the explanation of =get-pages=, I see the only thing I changed was replacing the .html with a blank string. When i make the following change to the =html-pages= file, it works fine!

#+BEGIN_SRC clojure 
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" ".html") (keys pages))
          (map #(layout-base-header %) (vals pages))))


#+END_SRC

Cool! so I will make a new folder called "home", and rename the folder "public" to "posts" so that it makes sense for me. After fixing the directory structure, my resources file looks like this:

#+BEGIN_EXAMPLE
resources/
├── home
│   └── index.html
├── md
│   └── my-first-md.md
├── partials
│   └── about.html
└── posts
    └── test-post.html
#+END_EXAMPLE

I then added a =home-page= function and modified =get-pages= to properly render. The relevant code (all of it) looks like this now:

#+BEGIN_SRC clojure 

(ns website-clj.web
  (:require [clojure.java.io :as io]
            [clojure.string :as str]
            [hiccup.page :refer [html5]]
            [me.raynes.cegdown :as md]
            [stasis.core :as stasis]))




(defn layout-base-header [page]
  (html5
   [:head
    [:meta {:charset "utf-8"}]
    [:meta {:name "viewport"
            :content "width=device-width, initial-scale=1.0"}]
    [:link {:rel "stylesheet" :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" :integrity "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" :crossorigin "anonymous"}]
    [:script {:src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" :integrity "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" :crossorigin "anonymous"}]]
   [:body
    [:div.logo "website-clj"]
    [:div.body page]]))

(def pegdown-options ;; https://github.com/sirthias/pegdown
  [:autolinks :fenced-code-blocks :strikethrough])


(defn markdown-pages [pages]
  (zipmap (map #(str/replace % #"\.md$" "") (keys pages))
          (map #(layout-base-header (md/to-html %)) (vals pages))))


(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(layout-base-header %) (vals pages))))


(defn partial-pages [pages]
  (zipmap (keys pages)
          (map layout-base-header (vals pages))))

(defn home-page [pages]
  (zipmap (keys pages)
          (map #(layout-base-header %) (vals pages))))

(home-page (stasis/slurp-directory "resources/home" #".*\.(html|css|js)$"))


(defn get-pages []
  (stasis/merge-page-sources
   {:landing (home-page (stasis/slurp-directory "resources/home" #".*\.(html|css|js)$"))
    :posts  (html-pages (stasis/slurp-directory "resources/posts" #".*\.html$"))
    :partials (partial-pages (stasis/slurp-directory "resources/partials" #".*\.html$"))
    :markdown (markdown-pages (stasis/slurp-directory "resources/md" #".*\.md$"))}))

(def app (stasis/serve-pages get-pages))
#+END_SRC

and the website is working now!

** My header and footer
On my old Python-flask based static blog, I made a nav bar that I really liked. The source looks like this:

#+BEGIN_SRC html

<!DOCTYPE html>
<html lang="en">
    <head>
        
        <meta charset="utf-8">
        <title>Nicholas George</title>    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!--link to bootstrap css -->
        <link href="/static/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    </head>
    
    <body style="font-size: 16px">

        <!--navbar -->
        <nav class="navbar navbar-inverse">
            <div class="container-fluid">
                <div class="navbar-header">
                    <a class="navbar-brand" href="/"> Nick George</a>
                </div>
                <ul class="nav navbar-nav navbar-right">

                    <li class="inactive"><a href="/projects/">Projects</a></li>
                    <li class="inactive"><a href="/blog/">Posts</a></li>
                   <li class="inactive"><a href="/notes/">Notes</a></li> 
<li>
  <a href="https://github.com/nkicg6">
    <span class="fa fa-github" style="font-size:24px"></span>
     
  </a>
</li>
<li>
  <a href="https://twitter.com/NicholasMG">
    <span class="fa fa-twitter-square" style="font-size:24px"></span>
     
  </a>
</li>
                </ul>                        

            </div>
        </nav>
        <div class="container">
<!--content goes here-->            
    

<!--footer -->
            <footer class="footer">
                <div class="text-center">
                    <span class="text-muted">&copy 2017 Nicholas George</span>
                </div>
            </footer>
        </div>
    <script data-cfasync="false" src="/cdn-cgi/scripts/f2bf09f8/cloudflare-static/email-decode.min.js"></script></body>
</html>

#+END_SRC

I'll translate that to hiccup and add it to my base. This was relatively straightforward to translate to hiccup. I just had to figure out the nested list structure, but once you do it isn't so bad. 
Here is my new =layout-base-header= function with the hiccup. 

#+BEGIN_SRC clojure 
(defn layout-base-header [page]
  (html5
   [:head
    [:meta {:charset "utf-8"}]
    [:meta {:name "viewport"
            :content "width=device-width, initial-scale=1.0"}]
    [:link {:rel "stylesheet" :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" :integrity "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" :crossorigin "anonymous"}]
    [:link {:rel "stylesheet" :href "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"}]
    [:script {:src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" :integrity "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" :crossorigin "anonymous"}]]
   [:body
    [:nav {:class "navbar navbar-inverse"}
     [:div {:class "container-fluid"}
      [:div {:class "navbar-header"}
       (link-to  {:class "navbar-brand"} "/" "Nick George")]
      [:ul {:class "nav navbar-nav navbar-right"}
       [:li {:class "inactive"} (link-to "/" "Science")]
       [:li {:class "inactive"} (link-to "/" "Programming")]
       [:li {:class "inactive"} (link-to "/" "About")]
       [:li [:a {:href "https://github.com/nkicg6"}
             [:span {:class "fa fa-github" :style "font-size:24px"}]]]
       [:li [:a {:href "https://twitter.com/NicholasMG"}
             [:span {:class "fa fa-twitter-square" :style "font-size:24px"}]]]]]]
    [:div.logo "website-clj"]
    [:div.body page]
    [:footer {:class "footer"}
     [:div {:class "text-center"}
      [:span {:class "text-muted"} "&copy 2018 Nick George"]]]]))
#+END_SRC

I changed the section names and added dummy links for now, but the rest is a pretty straightforward translation. I am sure I am writing it in a non-compact way (i.e. it looks like classes under tags can be indicated as =.= attributes such as =[:div.logo "website-clj"]= expanding to =<div class="logo"> "website-clj"</div>), but this is working for me and it now renders like so:

[[file:img/with-header-footer.png]]

** org-workflow: basic HTML export
   Christian Johansen's workshop tells you how to build the site if you were to write your posts in markdown. I write in =org-mode= markup and export to html. Org-mode provides excellent publishing and file export support (explained well in this [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][tutorial]]), so I will use it to edit my files. The first step is to setup a directory in =resources= called org-posts that contains my org files. I will add a file to it called =test_post.org= that looks like so:

#+BEGIN_EXAMPLE
#+OPTIONS: \n:1 toc:nil num:0 todo:nil ^:{}
#+HTML_CONTAINER: div



;* This is a test post

Here is a test post 




#+END_EXAMPLE

Next, I will add the following to my =config.org= file (or =init.el= file if you arent using an org-mode config file) that says the following:

#+BEGIN_SRC emacs-lisp 
(setq org-publish-project-alist
        '(
          ("posts" ;; name of this function
           :base-directory "~/personal_projects/website-clj/resources/org-posts" ;; where the orgs are
           :base-extension "org" ;; file ending to look for
           :publishing-directory "~/personal_projects/website-clj/resources/posts" ;; where to put the new one
           :publishing-function org-html-publish-to-html ;;function to run
           :headline-levels 4 ;; headline stuff
           :html-extension "html" ;; new file ending
           :body-only t) ;; don't add extra html formatting
          ("clj-site" :components ("posts")))) ;; project name
#+END_SRC

Now, if i run =M-x org-publish-project= then select =clj-site=, I get a nicely exported html file in my =posts directory= 

#+BEGIN_EXAMPLE
resources/
├── home
│   └── index.html
├── md
│   └── my-first-md.md
├── org-posts
│   └── test_post.org
├── partials
│   └── about.html
├── posts
│   └── test_post.html
└── public
    ├── css
    ├── img
    │   └── test-img.png
    └── js

#+END_EXAMPLE
Which is visible when I render the site (it is handled by the =html-posts= function)

** Images and relative links
*** Images
Adding images is important to any site, and links too for that matter. How well do they work in this format?
I'll start with a sample screenshot of my part of my landing page with an annotation. 
The first thing I did was make a new directory in my =resources/= directory called =public=, which will contain =img=, =css=, and =js= directories. The directory structure now looks like this:
#+BEGIN_EXAMPLE
resources/
├── home
├── md
├── partials
├── posts
└── public
    ├── css
    ├── img
    └── js
#+END_EXAMPLE

Now I will test it by adding a simple html tag for image to the source for my langing page. 

#+BEGIN_EXAMPLE
<h1>This is the landing page</h1>
<p>
 Welcome to it.

Here is a test image:

 <img src="../public/img/sample-img.png" alt="sample img!" />
</p>

#+END_EXAMPLE

This doesnt work. Changing the source to =<img src ="sample-img.png"/>= and copying the image to the same folder as the landing page doesn't help... 

**** Optimus  
     Christian Johansen's blog post uses =optimus= to wrap static folders. I'll start by trying to serve bootstrap locally rather than linking to the CDN. 
     I played around with this for a few hours yesterday and couldn't figure it out. I understood things reasonably well until =Optimus=, which doesn't make much sense to me because I do not have a background in web development so I really cant understand what it is doing or why it is doing it. This is likely because I did not spend much time with the docs, but they use a lot of web-jargon and I don't have the time or will to jump into that now. 

     Luckily, I explored Christian Johansen's website a little more and came across something that seemed quite useful ([[https://cjohansen.no/optimized-optimus-asset-paths-clojurescript/][here]]). But I didn't make much progress with this. 
...
Finally, after a few hours today I figured out how to add links. My directory structure now looks like so:
#+BEGIN_EXAMPLE
resources/
├── home
├── md
├── org-posts
├── partials
├── posts
└── public
    ├── css
    ├── img
    └── js

#+END_EXAMPLE
images can be added by referring to them relative to public. For example:
#+BEGIN_EXAMPLE
[:div.test [:img {:src "/img/test-img.png"}]] ; img test in the hiccup function layout-base-header
#+END_EXAMPLE

inserts the image stored in public/img/test-img.png

** org-workflow: Handling images
Back to my original org-export example file, I'll add an image in org-markup manner. 

#+BEGIN_EXAMPLE
#+OPTIONS: \n:1 toc:nil num:0 todo:nil ^:{}
#+HTML_CONTAINER: div



=* This is a test post
Here is a test post and a link to an image. 


[[file:~/personal_projects/website-clj/resources/public/img/test-img.png]]

#+END_EXAMPLE

Exporting this to html gives the following link structure in HTML:

#+BEGIN_EXAMPLE
<img src="file:///Users/Nick/personal_projects/website-clj/resources/public/img/test-img.png" alt="test-img.png" />
#+END_EXAMPLE

Which definitely wont work when I export the static site. Since all images are referred to via =img/=, I think I can easily write a string replace in Clojure and put it in my =html-posts= function to fix this formatting. 
/Note/
I know that I could use =enliven= to do pretty much the same thing, but with how my current workflow is, I dont think it is even necessary. I will add that in if I need to, but for now I just dont seem to need it. 
*A little meta, but the find/replace I am applying below is actually preventing me from showing you the find/replace... I'll have to use =enliven= after all!*

#+BEGIN_SRC clojure 
;; main pages function. 
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(fn [req] (layout-base-header req %))
               (map #(str/replace % #"file:///Users/Nick/personal_projects/website-clj/resources/public" "") ;; this fixes links to images
                    (vals pages)))))
#+END_SRC


Now I can start up my server and check out the link formatting when I =view-source= on =http://localhost:3000/test_post=:


=<img src="/img/test-img.png" alt="test-img.png" />=

Perfect! I will factor out this function so it is more readable like so:

*A little meta, but the find/replace I am applying below is actually preventing me from showing you the find/replace... I'll have to use =enliven= after all!*

#+BEGIN_SRC clojure 
(defn format-images [html]
  (str/replace html #"file:///Users/Nick/personal_projects/website-clj/resources/public" ""))

;; main pages function.
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(fn [req] (layout-base-header req %))
               (map format-images (vals pages)))))

#+END_SRC

I will likely need to add a similar helper when linking between pages in a post, but this =key value= handling of all the pages as simple html strings makes it very easy to add formatting fixes to my exported html pages. I am starting to feel the value and power of Clojure's emphasis on simplicity already--very cool!

** org-workflow: syntax highlighting
   [[https://cjohansen.no/building-static-sites-in-clojure-with-stasis/%20][Christian Johnson]] has an excellent description of formatting markdown fenced code blocks with pygments for nice display on his static site. His approach uses pygments and enliven and is very detailed and nice. However, the amazing =org-mode= takes care of syntax highlighting for me when I add =(setq org-src-fontify-natively t)= to my =config.org=. So here I will just test it real quick and see how it looks. 
In my HTML file, I will add a clojure code block like so:

#+BEGIN_EXAMPLE

#+OPTIONS: \n:1 toc:nil num:0 todo:nil ^:{}
#+HTML_CONTAINER: div




;* This is a test post
Here is a test post and a link to an image. 


[[file:~/personal_projects/website-clj/resources/public/img/test-img.png]]

And below is a test code block. 

#+BEGIN_SRC clojure 
(defn format-images [html]
  (str/replace html #"file:///Users/Nick/personal_projects/website-clj/resources/public" ""))

;; main pages function.
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(fn [req] (layout-base-header req %))
               (map format-images (vals pages)))))

#+END_SRC

How does it look?

#+END_EXAMPLE

This renders upon =M-x org-publish-project clj-site= to look like this:

[[file:img/syntax-highlighting.png]]

=org-src-fontify-natively= uses the currently active theme to highlight your source code. I just exported this using the [[https://github.com/fniessen/emacs-leuven-theme][Leuven theme]] (great for org-mode) and I like the way it looks. However, if I wanted to change it and use =enliven= with =pygments=, I would probably use some emacs-lisp code and packages such as those described here: https://emacs.stackexchange.com/questions/31439/how-to-get-colored-syntax-highlighting-of-code-blocks-in-asynchronous-org-mode-e , but for right now I dont think this is necessary for me so I will go with the raw html formatting from org-export. 

*** Links
Will update when I need it. 
use (link-to)
** publishing
   From =lein=, Christian gives some nice instructions, so I followed those to see how the export looks and it seems to work nicely. Now, I'd like to start testing on-line and I hosted my previous site on GithubPages, so I need a few config things to occur on export.  The first is the =CNAME= file, for mapping your domain name to the github repo. A good practice is to empty the target directory before exporting (as Christian did in =(stasis/empy-directory!)=), and I didn't see any options to exclude certain files, so I added a shell command to part of the export command and placed my =CNAME= in the =resources directory=:

#+BEGIN_SRC clojure 
  (ns website-clj.web
    (:require [optimus.assets :as assets]
              [optimus.export]
              [optimus.link :as link] 
              [optimus.optimizations :as optimizations]      
              [optimus.prime :as optimus]                    
              [optimus.strategies :refer [serve-live-assets]]
              [clojure.java.io :as io]
              [clojure.java.shell :as shell] ;; shell commands from clojure
              [clojure.string :as str]
              [hiccup.page :refer [html5]]
              [hiccup.element :refer (link-to image)]
              [stasis.core :as stasis]))
  ;; <-----snip----->

  ;; Christian's original:
  ;;
  ;; (def export-dir "build")
  ;; (defn export []
  ;;   (let [assets (optimizations/all (get-assets) {})]
  ;;     (stasis/empty-directory! export-dir)
  ;;     (optimus.export/save-assets assets export-dir)
  ;;     (stasis/export-pages (get-pages) export-dir {:optimus-assets assets})))
  ;;   
  ;; my edits to include the copy after export. 
  (defn cp-cname [export-dir]
    (shell/sh "cp" "resources/CNAME" (str export-dir "/CNAME")))


  (def export-dir "build")


  (defn export []
    (let [assets (optimizations/all (get-assets) {})]
      (stasis/empty-directory! export-dir)
      (optimus.export/save-assets assets export-dir)
      (stasis/export-pages (get-pages) export-dir {:optimus-assets assets}))
    (cp-cname export-dir))

#+END_SRC

Now I can keep CNAME where it is supposed to be the whole time. time for a test upload to see how it looks. 

*** Hosting on Github Pages
    To host on github pages, you need the static files to be in a repo all by themselves. No problem, since =target= is already on my gitignore, I can ignore my static content subdirectory and start a new repo within the subdirectory. Unfortunately, with the previously mentioned problems with =(stasis/empty-directory!)=, my =.git= repo is deleted with every update. Looking in stasis, there doesn't seem to be a way to leave certain files in the target directory alone (There was with my Python Flask setup...) while this may be a good and relatively easy use for a first pull request or something, for now I am going to do a very horribly inefficient thing and copy the =.git= directory around first. 

#+BEGIN_SRC clojure 
  (ns website-clj.web
    (:require [optimus.assets :as assets]
              [optimus.export]
              [optimus.link :as link] 
              [optimus.optimizations :as optimizations]      
              [optimus.prime :as optimus]                    
              [optimus.strategies :refer [serve-live-assets]]
              [clojure.java.io :as io]
              [clojure.java.shell :as shell] ;; shell commands from clojure
              [clojure.string :as str]
              [hiccup.page :refer [html5]]
              [hiccup.element :refer (link-to image)]
              [stasis.core :as stasis]))
  ;; <-----snip----->
  (def export-dir "target/nickgeorge.net")

  (def safe-dir "target")

  (defn cp-cname [export-dir]
    (shell/sh "cp" "resources/CNAME" (str export-dir "/CNAME")))

  (defn cp-gitignore [export-dir]
    (shell/sh "cp" "target/.gitignore" (str export-dir "/.gitignore")))

  (defn save-git [safe-dir export-dir] 
    (shell/sh "mv" (str export-dir "/.git") (str safe-dir "/.git")))

  (defn replace-git [safe-dir export-dir]
    (shell/sh "mv" (str safe-dir "/.git") (str export-dir "/.git")))


  (defn export []
    (save-git safe-dir export-dir)
    (let [assets (optimizations/all (get-assets) {})]
      (stasis/empty-directory! export-dir)
      (optimus.export/save-assets assets export-dir)
      (stasis/export-pages (get-pages) export-dir {:optimus-assets assets}))
    (cp-cname export-dir)
    (cp-gitignore export-dir)
    (replace-git safe-dir export-dir))

#+END_SRC


*** one push publishing with Leiningen :alias
*TODO: Use enliven to fix the image links.*
I can already build my website with my current alias, now I will make another to deploy!
The steps I need to do are: 
1. Command line build org-project
   - remember to add a header to tell org to /not/ evaluate code like this: =#+PROPERTY: header-args :eval never-export= 
2. Then run build-site
3. =git add= and =git push= all changes. 




* References

- [[https://github.com/magnars/stasis][Stasis]]
- [[https://github.com/magnars/optimus][Optimus links]]
- [[https://github.com/ring-clojure/ring/wiki/Static-Resources][Ring static middleware]]
- [[https://github.com/yokolet/hiccup-samples][hiccup samples]]
- Christian Johansen's post on Building static sites in Clojure with Stasis https://cjohansen.no/building-static-sites-in-clojure-with-stasis/
  - handling links https://cjohansen.no/optimized-optimus-asset-paths-clojurescript/
  - Also his post here is similar with some (useful) differences https://github.com/cjohansen/cjohansen-no/blob/master/resources/md/building-static-sites-in-clojure-with-stasis.md
- [[https://8thlight.com/blog/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html][Clojure namespaces]]
