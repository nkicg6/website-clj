#+HTML: <div id="edn">
#+HTML: {:title "Static clojure site part 2: images and links" :date "2018-08-07" :tags ("clojure" "static-site")}
#+HTML: </div>
#+OPTIONS: \n:1 toc:nil num:0 todo:nil ^:{}
#+PROPERTY: header-args :eval never-export

* Part 2: Images and links

** Images and relative links
*** Images
Adding images is important to any site, and links too for that matter. How well do they work in this format?
I'll start with a sample screenshot of my part of my landing page with an annotation. 
The first thing I did was make a new directory in my =resources/= directory called =public=, which will contain =img=, =css=, and =js= directories. The directory structure now looks like this:
#+BEGIN_EXAMPLE
resources/
├── home
├── md
├── partials
├── posts
└── public
    ├── css
    ├── img
    └── js
#+END_EXAMPLE

Now I will test it by adding a simple html tag for image to the source for my langing page. 

#+BEGIN_EXAMPLE
<h1>This is the landing page</h1>
<p>
 Welcome to it.

Here is a test image:

 <img src="../public/img/sample-img.png" alt="sample img!" />
</p>

#+END_EXAMPLE

This doesnt work. Changing the source to =<img src ="sample-img.png"/>= and copying the image to the same folder as the landing page doesn't help... 

**** Optimus  
     Christian Johansen's blog post uses =optimus= to wrap static folders. I'll start by trying to serve bootstrap locally rather than linking to the CDN. 
     I played around with this for a few hours yesterday and couldn't figure it out. I understood things reasonably well until =Optimus=, which doesn't make much sense to me because I do not have a background in web development so I really cant understand what it is doing or why it is doing it. This is likely because I did not spend much time with the docs, but they use a lot of web-jargon and I don't have the time or will to jump into that now. 

     Luckily, I explored Christian Johansen's website a little more and came across something that seemed quite useful ([[https://cjohansen.no/optimized-optimus-asset-paths-clojurescript/][here]]). But I didn't make much progress with this. 
...
Finally, after a few hours today I figured out how to add links. My directory structure now looks like so:
#+BEGIN_EXAMPLE
resources/
├── home
├── md
├── org-posts
├── partials
├── posts
└── public
    ├── css
    ├── img
    └── js

#+END_EXAMPLE
images can be added by referring to them relative to public. For example:
#+BEGIN_EXAMPLE
[:div.test [:img {:src "/img/test-img.png"}]] ; img test in the hiccup function layout-base-header
#+END_EXAMPLE

inserts the image stored in public/img/test-img.png

** org-workflow: Handling images
Back to my original org-export example file, I'll add an image in org-markup manner. 

#+BEGIN_EXAMPLE
#+OPTIONS: \n:1 toc:nil num:0 todo:nil ^:{}
#+HTML_CONTAINER: div



=* This is a test post
Here is a test post and a link to an image. 


[[file:~/personal_projects/website-clj/resources/public/img/test-img.png]]

#+END_EXAMPLE

Exporting this to html gives the following link structure in HTML:

#+BEGIN_EXAMPLE
<img src="img/test-img.png" alt="test-img.png" />
#+END_EXAMPLE

Which doesn't render properly wont work when I export the static site. Since all images are referred to =/img/=, I think I can easily write a string replace in Clojure and put it in my =html-posts= function to fix this formatting. 
/Note/
I know that I could use [[https://github.com/cgrand/enlive][enlive]] to do pretty much the same thing, but with how my current workflow is, I dont think it is even necessary. I will add that in if I need to, but for now I just dont seem to need it. 

#+BEGIN_SRC clojure 
;; main pages function. 
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(fn [req] (layout-base-header req %))
               (map #(str/replace % #"src=\"img" "src=\"/img") ;; this fixes links to images
                    (vals pages)))))
#+END_SRC


Now I can start up my server and check out the link formatting when I =view-source= on =http://localhost:3000/test_post=:


#+BEGIN_EXAMPLE
<img src="/img/test-img.png" alt="test-img.png" />
#+END_EXAMPLE

Perfect! I will factor out this function so it is more readable like so:

#+BEGIN_SRC clojure 
  (defn format-images [html]
    (str/replace html #"src=\"img" "src=\"/img"))

  ;; main pages function.
  (defn html-pages [pages]
    (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
            (map #(fn [req] (layout-base-header req %))
                 (map format-images (vals pages)))))

#+END_SRC

I will likely need to add a similar helper when linking between pages in a post, but this =key value= handling of all the pages as simple html strings makes it very easy to add formatting fixes to my exported html pages. I am starting to feel the value and power of Clojure's emphasis on simplicity already--very cool!
* References

- [[https://github.com/magnars/stasis][Stasis]]
- [[https://github.com/magnars/optimus][Optimus links]]
- [[https://github.com/ring-clojure/ring/wiki/Static-Resources][Ring static middleware]]
- [[https://github.com/yokolet/hiccup-samples][hiccup samples]]
- Christian Johansen's post on Building static sites in Clojure with Stasis https://cjohansen.no/building-static-sites-in-clojure-with-stasis/
  - handling links https://cjohansen.no/optimized-optimus-asset-paths-clojurescript/
  - Also his post here is similar with some (useful) differences https://github.com/cjohansen/cjohansen-no/blob/master/resources/md/building-static-sites-in-clojure-with-stasis.md
- [[https://8thlight.com/blog/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html][Clojure namespaces]]
- add more org-mode links!
