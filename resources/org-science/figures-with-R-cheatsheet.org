#+HTML: <div id="edn">
#+HTML: {:title "Making Figures with R: common things I need to look up and tricks" :date "2019-01-13" :updated "{{{time(%Y-%m-%d %a)}}}" :tags ["R" "science" "graphics"]}
#+HTML: </div>
#+OPTIONS: \n:1 toc:nil num:0 todo:nil ^:{} title:nil tex:t
#+PROPERTY: header-args :eval never-export
#+DATE: 2019-01-13 Sun
#+TITLE: Making figures with R: common things I need to look up and trick
#+TOC: headlines 1

#+HTML: <div id="article">
#+HTML:<h1 id="mainTitle">Making Figures with R: common things I need to look up and tricks</h1>
#+HTML:<div id="timedate">
/First published: {{{date}}}/
/Last updated: {{{time(%Y-%m-%d %a)}}}/
#+HTML:</div>

I use R for most of my data analysis and especially for making figures. There are a few things I constantly need to look up when it comes to fine-grained figure editing and graphics, as well as some best practices I picked up which have made my life easier. I'll present them below in the form of an example problem. 

*Disclaimer!* I am mostly self taught when it comes to R and statistics. So if I misuse any statistics or mangle any R code, please let me know (email listed on my home page) and I will fix it!

Check out my post on [[http://nickgeorge.net/science/consistent-style-for-scientific-figures-with-ggplot2/][keeping plot styles consistent]] as well!


** Making the data
:PROPERTIES:
:CUSTOM_ID: making-the-data
:END:

In the spirit of making a [[https://stackoverflow.com/help/mcve][reproducible example]] that you can follow along with, we will make the data from scratch. 

For my PhD thesis project, I work on investigating neuron-glia interactions. This is fake data, but I recently wrote my comprehensive exam so this data is modeled after what I was working with for my project. Basically, I was measuring part of the neuron called the Axon initial segment and wanted to compare two different treatments. 

To model this problem, I will just use two normal distributions with different means with separate labels. In this case, the names will be purposely awful so that we can rename them later. I'll also add other grouping categories so that we can segment the data  in different ways. 

#+BEGIN_SRC R :session rsesh :results output :exports both
  # make two normal distributions with different means and n's
  set.seed(42) # reproducibility
  vals <- c(rnorm(mean=22,sd = 3, n=120), rnorm(mean=18,sd=3, n=120))
  # now labels
  names <- c(rep("untreated", times=120), rep("treated", times=120))
  samples <- rep(c(rep("a1", times=40),rep("a2", times=40), rep("a3", times=40)), times=2)
  data <- data.frame(names, vals, samples)
  head(data)
#+END_SRC

#+RESULTS:
:       names     vals samples
: 1 untreated 26.11288      a1
: 2 untreated 20.30591      a1
: 3 untreated 23.08939      a1
: 4 untreated 23.89859      a1
: 5 untreated 23.21280      a1
: 6 untreated 21.68163      a1

** Useful libraries and standardizing settings
:PROPERTIES:
:CUSTOM_ID: libraries-and-standard-settings
:END:

 Now that we made the data, let's start playing with it. Here are the libraries I commonly use for figures. 

 #+BEGIN_SRC R :session rsesh :results output :exports both
 library(dplyr) # essential!
 library(ggplot2) # plots
 library(ggpubr) # signif levels on plots
 library(latex2exp) # annotating plots
 #+END_SRC

You'll see what we use these for as we go, but briefly:
- [[https://dplyr.tidyverse.org/][dplyr]] is essential for organizing data for plotting.
- [[https://rpkgs.datanovia.com/ggpubr/index.html][ggpubr]] for adding statistical significance and testing directly to plots.
- [[https://cran.r-project.org/web/packages/latex2exp/vignettes/using-latex2exp.html][latex2exp]] adding \LaTeX{} symbols to your plots

You want the figures you make to have a standard look and style to them. I typically use [[https://ggplot2.tidyverse.org/][ggplot2]] along with [[https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html][cowplot]], which provides nice defaults on top of ggplot for scientific plotting.

If you want clean plots and granular control over your styles, see the code block below which I add to almost every script or RMarkdown document I make. 

#+BEGIN_SRC R :session rsesh :results output :exports both

  ####### defaults for lots of plots #########
  theme_and_axis_size <- theme(legend.position = "None", # you can add legends to your plots by adding +theme(legend.position = ...) where ... is the position. 
          text=element_text(size=16), 
          axis.text = element_text(size=15, face="bold", color="black"), 
          axis.line = element_line(color = 'black', size = 0.6))

  theme_set(theme_classic() + theme_and_axis_size) # Global setup for ggplot2 of your defaults.

  color2_standard <- scale_color_manual(values=c("black", "red"))
  fill2_standard <- scale_fill_manual(values=c("black", "red"))
  base_pallett <- "Paired" # BuGn is also good and BrBG 
  statsize <- 5
  starsize <- 10
#+END_SRC


You'll see how we use these variables will be explained as we go, but the idea is that we set the main plot style variables globally, and then we can adjust the groups by changing these settings in one place and propagate to all the plots we make. 

=theme_and_axis_size= stores =ggplot2= standard size and legend options. This one is really important for having the same text size and style for all your your plots 

=theme_classic()= is a is a white background plot without gridlines, as opposed to the grey plot with gridlines in default ggplot2.

=theme_set()= sets the theme variables globally for your session. When I type =theme_set(theme_classic()+ theme_and_axis_size)= I set all those variables as defaults without needing to add them to every plot. 
Of course, if you want to add more specific values or things to individual charts (maybe you do want a legend), it is easy to add a separate =theme()= option to that specific plot with your options. 

Since I am only plotting two classes for most of this example, I used black and red as my color options in =scale_color_manual= and =scale_fill_manual=. I would otherwise use http://colorbrewer2.org/ to pick a colorblind-safe and pretty palette like [[http://colorbrewer2.org/#type=qualitative&scheme=Paired&n=4][Paired]] or [[http://colorbrewer2.org/#type=diverging&scheme=PRGn&n=11][PRGn]]. Storing it as a variable makes it easy to change for all your plots. 
=statsize= and =starsize= are for the significance plots. 

I might make a lot of drafts of plots before I decide on a common style. I like this method of setting my defaults at the top of my script and then customizing them as I go. A consistent clean style makes a really big difference and shows you care about your data and your presentation. 

** Renaming variables, re-ordering columns, and renaming columns
:PROPERTIES:
:CUSTOM_ID: renaming-variables-reordering-columns
:END:

The data looks like so:

#+BEGIN_SRC R :session rsesh :results output :exports both
  head(data)
#+END_SRC

#+RESULTS:
:       names     vals samples
: 1 untreated 26.11288      a1
: 2 untreated 20.30591      a1
: 3 untreated 23.08939      a1
: 4 untreated 23.89859      a1
: 5 untreated 23.21280      a1
: 6 untreated 21.68163      a1

If we make a quick plot of it, say a boxplot:
#+BEGIN_SRC R :session rsesh :file ../public/img/wrong.png :results output graphics :exports both

  ggplot(data, aes(x=names, y=vals, color=names)) +
      geom_boxplot() +
      color2_standard

#+END_SRC

#+RESULTS:
[[file:../public/img/wrong.png]]

*** Option 1: Renaming variables with =if_else()= and =case_when()= 
:PROPERTIES:
:CUSTOM_ID: renaming-variables
:END:

ggplot2 orders variables in alphabetical order, so our =untreated= (aka control) is shown before our =treated= (aka experimental). Not ideal. One way to fix this is to *rename the variables.* This can be done like so:

#+BEGIN_SRC R :session rsesh :results output :exports both
  data  %>%
      mutate(names = if_else(names=="untreated", "control", "treated"))  %>%
      head()
#+END_SRC

#+RESULTS:
:     names     vals samples
: 1 control 26.11288      a1
: 2 control 20.30591      a1
: 3 control 23.08939      a1
: 4 control 23.89859      a1
: 5 control 23.21280      a1
: 6 control 21.68163      a1

[[https://dplyr.tidyverse.org/reference/if_else.html][if_else()]]works great for dichotomous variables. However, if you have a bunch and you want to rename them all, use [[https://dplyr.tidyverse.org/reference/case_when.html][case_when()]]. 

#+BEGIN_SRC R :session rsesh :results output :exports both
  data  %>%
      mutate(names = case_when(names == "untreated" ~ "control",
                               names ==  "treated" ~ "experimental",
                               TRUE ~ "UNKNOWN"))  %>% # and so on for more cases. Add the TRUE case to catch all others.
      head()
#+END_SRC

#+RESULTS:
:     names     vals samples
: 1 control 26.11288      a1
: 2 control 20.30591      a1
: 3 control 23.08939      a1
: 4 control 23.89859      a1
: 5 control 23.21280      a1
: 6 control 21.68163      a1

=if_else= and =case_when()= would solve the problem. Note when using case_when() if you don't catch all the cases the other rows will become =NA=. Assign your own "just in case" value which you can easily check for later. 

A more general, less destructive solution would be to re-level the factors. I will use [[https://forcats.tidyverse.org/][forcats]] to demonstrate this. 

*** Option 2: Reordering factors
:PROPERTIES:
:CUSTOM_ID: reordering-factors
:END:

*Note*: in the code below I am not going to import the entire =forcats= library, because I only need one function. Instead, I will use 'inline import' to grab the one function I need. This is useful if you only need one function and don't want to load the whole library, or if you think that two libraries have functions with the same name and you aren't sure which you loaded first. In R, you inline import like so: =libraryName::functionName=. Read it as, "from =libraryName= use =functionName=". You can do this with any function from any library, including base R. This is actually great to do because it is more explicit.

=fct_relevel= is the function we need ([[https://forcats.tidyverse.org/reference/fct_relevel.html][docs]]). 

#+BEGIN_SRC R :session rsesh :results output :exports both
  data$names <- forcats::fct_relevel(data$names, "untreated")
#+END_SRC

#+RESULTS:

Now plot it again:

#+BEGIN_SRC R :session rsesh :file ../public/img/releveled.png :results output graphics :exports both

  ggplot(data, aes(x=names, y=vals, color=names)) +
      geom_boxplot() +
      color2_standard

#+END_SRC

#+RESULTS:
[[file:../public/img/releveled.png]]

We just re-ordered the variables without re-naming them. Note that =fct_relevel= accepts a vector, so from our data frame, we selected the column, then just put the variable we wanted first as the next argument. Then we assigned it back to the original column name.

*** Renaming columns
:PROPERTIES:
:CUSTOM_ID: renaming-columns
:END:

 #+BEGIN_SRC R :session rsesh :results output :exports both
   data  %>%
       rename(NewNames = names)  %>%
       head()
 #+END_SRC

 #+RESULTS:
 :    NewNames     vals samples
 : 1 untreated 26.11288      a1
 : 2 untreated 20.30591      a1
 : 3 untreated 23.08939      a1
 : 4 untreated 23.89859      a1
 : 5 untreated 23.21280      a1
 : 6 untreated 21.68163      a1

[[https://dplyr.tidyverse.org/reference/select.html][rename]] is from =dplyr=. The argument order is =NewColumnName= = =OldColumnName=

** Paired plots
:PROPERTIES:
:CUSTOM_ID: paired-plots
:END:

We have two grouping variables in this dataset. Let's say measurements were paired, and we wanted to show both the paired differences and the overall boxplot. 

*** Summarizing and making a paired plot
:PROPERTIES:
:CUSTOM_ID: summarizing-and-paired-plot
:END:
/NOTE/ this can be done more simply with built-in ggplot functions like =stat_summary()=, which will be added in a future post. 
We can brute force this problem by making a summary like so:

#+BEGIN_SRC R :session rsesh :results output :exports both
  summarized_data <- data  %>%
      group_by(names, samples)  %>%
      summarize(mean_val = mean(vals),
                sd_vals = sd(vals), n = n())  %>%
      mutate(sem_vals = sd_vals/sqrt(n))
  summarized_data
#+END_SRC

#+RESULTS:
#+begin_example
# A tibble: 6 x 6
# Groups:   names [2]
      names samples mean_val  sd_vals     n  sem_vals
     <fctr>  <fctr>    <dbl>    <dbl> <int>     <dbl>
1 untreated      a1 21.88139 3.667164    40 0.5798295
2 untreated      a2 22.23953 2.748078    40 0.4345093
3 untreated      a3 22.14594 2.904321    40 0.4592135
4   treated      a1 17.22540 2.556320    40 0.4041897
5   treated      a2 18.09546 2.638866    40 0.4172414
6   treated      a3 17.71718 2.811301    40 0.4445057
#+end_example

We made a summary of the data in two steps. First, we grouped by both the treatment group and the individual samples. Then, used [[https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/summarise][dplyr::summarize]] to make some summary vars. The =mutate= step adds the standard error of the mean, a measure of the spread of our sample mean around the population mean. The formula is $SEM=\dfrac{s}{\sqrt{n}}$. Where $s$ is the standard deviation. 

Using these data, let's make a summary boxplot. 

#+BEGIN_SRC R :session rsesh :file ../public/img/paired-boxplot.png :results output graphics :exports both
  ggplot(summarized_data, aes(x=names, y=mean_val, color=names)) +
      geom_boxplot() +
      geom_errorbar(width=0.05, aes(ymin=mean_val - sem_vals,
                                    ymax=mean_val + sem_vals, alpha=0.4)) +
      geom_line(inherit.aes = FALSE, aes(x=names, y=mean_val, group=samples)) +
      color2_standard +
      labs(x="", y=TeX("Length $\\mu{}m$"))
#+END_SRC

#+RESULTS:
[[file:../public/img/paired-boxplot.png]]

Note the use of =TeX()= in the axis label. 
*** Significance test with R 
:PROPERTIES:
:CUSTOM_ID: p-values
:END:

let's do a two-tailed /t/-test to see whether we can conclude that the difference between the groups is unlikely to occur by chance (significance arbitrarily set to $\alpha{}=0.05$).
We will use the R formula interface.

#+BEGIN_SRC R :session rsesh :results output :exports both
  t.test(mean_val~names, data=summarized_data, paired=TRUE)
#+END_SRC

#+RESULTS:
#+begin_example

	Paired t-test

data:  mean_val by names
t = 29.777, df = 2, p-value = 0.001126
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 3.772432 5.046781
sample estimates:
mean of the differences 
               4.409607
#+end_example

We can reject the null hypothesis that the true difference in the means is equal to 0 with $\alpha{}=0.05$.

*Be careful when interpreting /p/-values!* Below are my favorite papers on this contentious subject:
- [[https://www.nature.com/articles/nn.2886][Erroneous analysis of interactions in neuroscience: a problem of significance]]
- [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4877414/][Statistical tests, P values, confidence intervals, and power: a guide to misinterpretations]]
- [[https://www.tandfonline.com/doi/abs/10.1198/000313006X152649][The Difference Between "Significant" and "Not Significant" is not Itself Statistically Significant]] (Paywall)
- Nice explanation of /p/-values http://statisticsbyjim.com/hypothesis-testing/interpreting-p-values/

*** Significance stars and stats with *ggpubr*
:PROPERTIES:
:CUSTOM_ID: significance-with-ggpubr
:END:

Using ggpubr, we can add this same information to our plot. 

#+BEGIN_SRC R :session rsesh :file ../public/img/paired-boxplot-signif.png :results output graphics :exports both
  ggplot(summarized_data, aes(x=names, y=mean_val, color=names)) +
      geom_boxplot() +
      geom_errorbar(width=0.05, aes(ymin=mean_val - sem_vals,
                                    ymax=mean_val + sem_vals, alpha=0.4)) +
      geom_line(inherit.aes = FALSE, aes(x=names, y=mean_val, group=samples)) +
      color2_standard +
      stat_compare_means(method="t.test", paired=TRUE, label="p.signif", size=starsize) + # NEW!
      labs(x="", y=TeX("Length $\\mu{}m$"))

#+END_SRC

#+RESULTS:
[[file:../public/img/paired-boxplot-signif.png]]

See the docs for [[https://rpkgs.datanovia.com/ggpubr/index.html][ggpubr]] for more options (types of tests, pairing, etc.). This is a really awesome library. 
But this looks ok, however it could use some tweaking. Let's move the stars around and add the p-value and test name

#+BEGIN_SRC R :session rsesh :file ../public/img/paired-signif2.png :results output graphics :exports both
  ggplot(summarized_data, aes(x=names, y=mean_val, color=names)) +
      geom_boxplot() +
      geom_errorbar(width=0.05, aes(ymin=mean_val - sem_vals,
                                    ymax=mean_val + sem_vals, alpha=0.4)) +
      geom_line(inherit.aes = FALSE, aes(x=names, y=mean_val, group=samples)) +
      color2_standard +
      theme_and_axis_size +
      stat_compare_means(method="t.test", paired=TRUE, label="p.signif", # edited
                         label.x = 1.97, label.y=23, size=starsize) +
      stat_compare_means(method="t.test", paired=TRUE, size=statsize, # New!
                         label.x=2.05, label.y=23.5) +
      labs(x="", y=TeX("Length $\\mu{}m$"))
#+END_SRC

#+RESULTS:
[[file:../public/img/paired-signif2.png]]
We added a new call to =ggpubr= to add the test name, and we moved both labels so they looked nicer. 

** Stats within ggplot2 and custom legend positions
:PROPERTIES:
:CUSTOM_ID: custom-legend-and-stats
:END:

   Let's say we wanted to make a plot of the cumulative distribution for all the data. The cumulative distribution function (CDF) maps a value to the probability that a random variable is less than or equal to that value (you can also say, the function maps a value to its percentile rank. See Allen Downey's book /Think Stats/ for an excellent, simple explanation http://www.greenteapress.com/thinkstats/ and [[https://en.wikipedia.org/wiki/Cumulative_distribution_function][wikipedia]]). You can approximate the true CDF by calculating the /empirical/ CDF (ECDF) with R using the base function [[https://stat.ethz.ch/R-manual/R-devel/library/stats/html/ecdf.html][stats::ecdf()]]. 
   However, =ggplot2= also provides a number of methods for calculating /and/ plotting data summaries like the ECDF with the [[https://ggplot2.tidyverse.org/reference/#section-layer-stats][stats_*]] layers. Let's use [[https://ggplot2.tidyverse.org/reference/stat_ecdf.html][stats_ecdf]] to plot the ECDF. 

*** Plotting the /ecdf/ with ggplot2
:PROPERTIES:
:CUSTOM_ID: plotting-ecdf
:END:


#+BEGIN_SRC R :session rsesh :file ../public/img/cdf-raw.png :results output graphics :exports both
  ggplot(data, aes(vals, color=names)) +
      stat_ecdf(geom="step", pad=TRUE) +
      color2_standard +
      labs(x=TeX("Length ($\\mu{}m$)"), y="Probability")

#+END_SRC

#+RESULTS:
[[file:../public/img/cdf-raw.png]]

*** Custom legend positions
:PROPERTIES:
:CUSTOM_ID: custom-legend-movement
:END:

We previously removed the legend with our =theme_and_axis_size= presets. Here, we can add it back. 


#+BEGIN_SRC R :session rsesh :file ../public/img/cdf-with-legend.png :results output graphics :exports both
  ggplot(data, aes(vals, color=names)) +
      stat_ecdf(geom="step", pad=TRUE) +
      color2_standard +
      theme(legend.position="right")+
      labs(x=TeX("Length ($\\mu{}m$)"), y="Probability")

#+END_SRC

#+RESULTS:
[[file:../public/img/cdf-with-legend.png]]

Looks ok, but I want to remove the title and move it to the left more. 


#+BEGIN_SRC R :session rsesh :file ../public/img/cdf-with-legend-moved.png :results output graphics :exports both
  ggplot(data, aes(vals, color=names)) +
      stat_ecdf(geom="step", pad=TRUE) +
      color2_standard +
      theme(legend.position=c(0.7, 0.5), legend.title = element_blank())+
      labs(x=TeX("Length ($\\mu{}m$)"), y="Probability")

#+END_SRC

#+RESULTS:
[[file:../public/img/cdf-with-legend-moved.png]]

=legend.position= accepts coordinates, which are between 0 and 1, and relative to the bottom left origin (0,0) of the plot (legend position is well explained [[http://www.sthda.com/english/wiki/ggplot2-legend-easy-steps-to-change-the-position-and-the-appearance-of-a-graph-legend-in-r-software][here]]). 

Another great resource for legends and all other things R is the [[http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/][r cookbook]] website. 

*** Kolmogorov-Smirnov Test 
:PROPERTIES:
:CUSTOM_ID: ks-test
:END:

Want to compare the distributions with a [[https://en.wikipedia.org/wiki/Kolmogorov%25E2%2580%2593Smirnov_test][Kolmogorov-Smirnov Test]]?

#+BEGIN_SRC R :session rsesh :results output :exports both
  test_vals <- filter(data, names == "treated")$vals
  control_vals <- filter(data, names == "untreated")$vals
  ks.test(control_vals, test_vals)

#+END_SRC

#+RESULTS:
: 
: 	Two-sample Kolmogorov-Smirnov test
: 
: data:  control_vals and test_vals
: D = 0.6, p-value < 2.2e-16
: alternative hypothesis: two-sided


** =tidyr::gather= is confusing but useful
:PROPERTIES:
:CUSTOM_ID: tidyr::gather
:END:

One function I have never been able to figure out is tidyr's =gather=. Every time I need to use it I try every permutation of arguments until I get it to look how I want it to. 
Here is how it works. Let's say your data frame looks like this:

#+BEGIN_SRC R :session rsesh :results output :exports both
  library(tidyr)

  long_data <- data.frame("animal" = c("E1", "E2", "E3"),
                          "left_slope" = c(0.2,0.5,0.26), "right_slope"= c(0.3,0.4, 0.77),
                          "treatment" = c("control", "experimental", "control"))
  long_data
#+END_SRC

#+RESULTS:
:   animal left_slope right_slope    treatment
: 1     E1       0.20        0.30      control
: 2     E2       0.50        0.40 experimental
: 3     E3       0.26        0.77      control

I want to plot the slope with color indicating side (right_ or left_) for each animal and treatment condition. 
tidyr's =gather= is great for this. 

Here is how it works (arguments renamed by me for clarity):
=gather(dataFrame, name_of_new_key_column, name_of_new_value_column, column_to_combine1, column_to_combine2, ...)=

So if I want =left_slope= and =right_slope= values to be combined into a column, but keep the associated column name (left_slope, right_slope) as a key, I would type this:

#+BEGIN_SRC R :session rsesh :results output :exports both
  long_data %>%
      gather("slope_side", "slope", left_slope, right_slope)
#+END_SRC

#+RESULTS:
:   animal    treatment  slope_side slope
: 1     E1      control  left_slope  0.20
: 2     E2 experimental  left_slope  0.50
: 3     E3      control  left_slope  0.26
: 4     E1      control right_slope  0.30
: 5     E2 experimental right_slope  0.40
: 6     E3      control right_slope  0.77

Alternatively, You can tell gather which columns to /not/ combine like so:
 
#+BEGIN_SRC R :session rsesh :results output :exports both
  long_data %>%
      gather("slope_side", "slope", -treatment, -animal)
#+END_SRC

#+RESULTS:
:   animal    treatment  slope_side slope
: 1     E1      control  left_slope  0.20
: 2     E2 experimental  left_slope  0.50
: 3     E3      control  left_slope  0.26
: 4     E1      control right_slope  0.30
: 5     E2 experimental right_slope  0.40
: 6     E3      control right_slope  0.77

giving the same result. 

** What's wrong with =tidyr::gather= 
=gather= is not intuitive, and I think some of it comes from its permissive, flexible, parameter acceptance and strange defaults. For example, if I just pass the terms =left_slope=, =right_slope=, (quoted or unquoted, as gather supports [[https://rlang.r-lib.org/reference/quasiquotation.html][quasiquotation]]), without specifying anything else, look what happens:

#+BEGIN_SRC R :session rsesh :results output :exports both
  long_data %>%
      gather(left_slope, right_slope)
#+END_SRC

#+RESULTS:
#+begin_example
  left_slope right_slope left_slope  right_slope
1       0.20        0.30     animal           E1
2       0.50        0.40     animal           E2
3       0.26        0.77     animal           E3
4       0.20        0.30  treatment      control
5       0.50        0.40  treatment experimental
6       0.26        0.77  treatment      control
Warning message:
attributes are not identical across measure variables;
they will be dropped
#+end_example


What in the world is going on???! The error message is unclear, but the really bad part is that the function ran despite me only providing two arguments to what at the very least should require four.

I have no idea why you would design a function to work like this. I think tidyr is quoting the first two arguments and using them as the =name_of_new_key= and =name_of_new_value= arguments (like you would expect with positional arguments), but upon looking closer at the [[https://tidyr.tidyverse.org/reference/gather.html][documentation]], I see that leaving the "columns" selection blank just selects all the columns and runs like everything is OK. This has led to way too much confusion for me and many others I work with, and I think demonstrates a case where the function should DEFINITELY fail and throw an exception rather than using this confusing default (why would you want to gather /all/ the columns?). 

I love the tidyverse, but it took me a long time to figure this one out. 

I mainly wrote this for future me, and I am sure I will be back here next time I mess with =gather=.

/This is a work in progress. As I come across other problems, I will add them here!/
#+HTML: </div>
