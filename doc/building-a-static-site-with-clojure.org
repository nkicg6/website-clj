#+TITLE: Clojure static site: why and how
#+DATE: 2018-07-07
#+OPTIONS: toc:nil author:nil title:nil date:nil num:nil ^:{} \n:1 todo:nil
#+PROPERTY: header-args :eval never-export
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}
#+LATEX_HEADER: \hypersetup{colorlinks=true,citecolor=black,linkcolor=black,urlcolor=blue,linkbordercolor=blue,pdfborderstyle={/S/U/W 1}}
#+LATEX_HEADER: \usepackage[round]{natbib}
#+LATEX_HEADER: \renewcommand{\bibsection}
/Note!/
This post will eventually be part of the clojure website, but I am not done yet. This will track my progress as I go. This source directory will be different from the actual website directory. 
 
* Static sites
These are static collections of HTML, CSS, and JavaScript files that make up simple, fast websites. The main difference between static sites and dynamic websites is that static sites do not fetch information from a database upon requests. They simply contain all the HTML, etc. files that make up the website.
* Why?
They are simple and very useful. I don't need anything more complicated for my personal website, and static sites are low maintenance and easy to customize and extend. 
** Why Clojure?
 I am currently learning Clojure, mostly because I wanted to learn functional programming and Rich Hickey gives [[https://github.com/tallesl/Rich-Hickey-fanclub][amazing talks]], but also because it is an functional programming language hosted on both the web with clojurescript (javascript) and the JVM (regular Clojure). Since clojurescript is a clojure trans-piler for javascript, that means that I can use one language to leverage all of javascript and non-web programming or backend web tasks with clojure!
** Why Stasis?
My original website was written with python and the Flask framework and made into a static site with [[https://pythonhosted.org/Frozen-Flask/][Frozen-flask]] and [[https://pythonhosted.org/Flask-FlatPages/][Flask-FlatPages]] for hosting on github pages. I was originally going to port it to Clojure using the Clojure static site generator [[https://github.com/cryogen-project/cryogen][Cryogen]], a clojure/clojurescript static website generator, but I found the templates hard to understand and customization difficult. In the spirit of Clojure (and Tim Ewald's excellent talk [[https://www.youtube.com/watch?v=ShEez0JkOFw][Programming with hand tools]]), I choose to use the [[https://github.com/magnars/stasis][Stasis]], the clojure library for developing (frameworkless) static web sites. I will write about that in this post as I go. 

* Building the website: basics
  /Disclaimer/ 
I am still very new to Clojure, so my custom code will likely be very beginner-ish and rough, but hopefully it will improve as I go!
 Christian Johansen's post on Building static sites in Clojure with Stasis https://cjohansen.no/building-static-sites-in-clojure-with-stasis/ 

** Style
   After following most of the Christian Johansen's awesome tutorial, the first thing I wanted to do was add [[https://getbootstrap.com/docs/3.3/getting-started/][Twitter Bootstrap]] CSS. I know there is a [[https://github.com/weavejester/hiccup-bootstrap][Hiccup wrapper]] for bootstrap, but since I write in Emacs Org-mode and export to HTML directly, I don't think it is necessary for me. Hiccup looks like simplified HTML, so I changed the name of the function from =layout-page= to =layout-base-header= and added the links from the Bootstrap home page. The function now looks like this:

#+BEGIN_SRC clojure 
  (defn layout-base-header [page]
    (html5
     [:head
      [:meta {:charset "utf-8"}]
      [:meta {:name "viewport"
              :content "width=device-width, initial-scale=1.0"}]
      [:link {:rel "stylesheet" :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" :integrity "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" :crossorigin "anonymous"}]
      [:script {:src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" :integrity "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" :crossorigin "anonymous"}]]
     [:body
      [:div.logo "website-clj"]
      [:div.body page]]))

#+END_SRC

This seems to work great for my =.md= rendered page, but the base page didn't inherit this styling. Looking through the functions I copied from the tutorial, I am betting it is due to the =get-pages= function. When it declares the =:public= map, it doesn't wrap the =stasis/slurp-directory= call in another function. I assume this just renders them raw. So I will modify =markdown-pages= function for HTML pages to see if this takes care of it. 

#+BEGIN_SRC clojure 
  (defn markdown-pages [pages]
    (zipmap (map #(str/replace % #"\.md$" "") (keys pages))
            (map #(layout-base-header (md/to-html %)) (vals pages))))

  (defn html-pages [pages]
    (zipmap (map #(str/replace % #"\.html" "") (keys pages))
            (map #(layout-base-header (vals pages)))))

#+END_SRC

and then I will change =get-pages= to add this function. 

#+BEGIN_SRC clojure 
(defn get-pages []
  (stasis/merge-page-sources
   {:public (html-pages (stasis/slurp-directory "resources/public" #".*\.(html|css|js)$"))
    :partials (partial-pages (stasis/slurp-directory "resources/partials" #".*\.html$"))
    :markdown (markdown-pages (stasis/slurp-directory "resources/md" #".*\.md$"))}))

#+END_SRC
But when I refreshed my webpage, I got this horrible error:

#+BEGIN_EXAMPLE
1. Unhandled java.lang.IllegalArgumentException
   Don't know how to create ISeq from: clojure.core$map$fn__4781
...
#+END_EXAMPLE

and on and on. Well, looks like I have to figure out what these functions are doing. 

First, I'll run one that I know works to see what the output looks like:

#+BEGIN_SRC clojure 
(markdown-pages (stasis/slurp-directory "resources/md" #".*\.md$"))
#+END_SRC

#+BEGIN_EXAMPLE
[ "/my-first-md" "<!DOCTYPE html>\n<html><head><meta charset=\"utf-8\"><meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"><link crossorigin=\"anonymous\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" rel=\"stylesheet\"><script crossorigin=\"anonymous\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script></head><body><div class=\"logo\">website-clj</div><div class=\"body\"><h1>first md post</h1><p>Short for now</p></div></body></html>" ]

#+END_EXAMPLE

Cool. but running the following fails:

#+BEGIN_SRC clojure 
(html-pages (stasis/slurp-directory "resources/public" #".*\.html$"))
#+END_SRC

#+BEGIN_EXAMPLE
1. Unhandled java.lang.IllegalArgumentException
   Don't know how to create ISeq from: clojure.core$map$fn__4781
...
#+END_EXAMPLE

That tells me we are returning a function. And now I see we obviously are with the bottom =map= function! =#()= is an anonymous function, so I need to add the argument =%=! 

#+BEGIN_SRC clojure 
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(layout-base-header %) (vals pages))))
;; test
(html-pages (stasis/slurp-directory "resources/public" #".*\.html$"))
#+END_SRC

#+BEGIN_EXAMPLE
[ "/index" "<!DOCTYPE html>\n<html><head><meta charset=\"utf-8\"><meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"><link crossorigin=\"anonymous\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" rel=\"stylesheet\"><script crossorigin=\"anonymous\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script></head><body><div class=\"logo\">website-clj</div><div class=\"body\"><!DOCTYPE html>\n<html>\n  <head>\n    <title>My blog</title>\n  </head>\n  <body>\n    <h1>My blog</h1>\n    <p>\n      Welcome to it.\n    </p>\n  </body>\n</html>\n</div></body></html>" ]

#+END_EXAMPLE

Excellent! Now I will start the app up again and see what happens. 

weird! The landing page can't find it. 
[[file:img/not-found-index.png]]


But when I navigate to =/index=, it is right there and working. 

[[file:img/working-index.png]]

hmm, I will have to see how the home page will be rendered. When I return to Christian's blog, and re-read the explanation of =get-pages=, I see the only thing I changed was replacing the .html with a blank string. When i make the following change to teh =html-pages= file, it works fine!

#+BEGIN_SRC clojure 
(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" ".html") (keys pages))
          (map #(layout-base-header %) (vals pages))))


#+END_SRC

Cool! so I will make a new folder called "home", and rename the folder "public" to "posts" so that it makes sense for me. After fixing the directory structure, my resources file looks like this:

#+BEGIN_EXAMPLE
resources/
├── home
│   └── index.html
├── md
│   └── my-first-md.md
├── partials
│   └── about.html
└── posts
    └── test-post.html
#+END_EXAMPLE

I then added a =home-page= function and modified =get-pages= to properly render. The relevant code (all of it) looks like this now:

#+BEGIN_SRC clojure 

(ns website-clj.web
  (:require [clojure.java.io :as io]
            [clojure.string :as str]
            [hiccup.page :refer [html5]]
            [me.raynes.cegdown :as md]
            [stasis.core :as stasis]))




(defn layout-base-header [page]
  (html5
   [:head
    [:meta {:charset "utf-8"}]
    [:meta {:name "viewport"
            :content "width=device-width, initial-scale=1.0"}]
    [:link {:rel "stylesheet" :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" :integrity "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" :crossorigin "anonymous"}]
    [:script {:src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" :integrity "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" :crossorigin "anonymous"}]]
   [:body
    [:div.logo "website-clj"]
    [:div.body page]]))

(def pegdown-options ;; https://github.com/sirthias/pegdown
  [:autolinks :fenced-code-blocks :strikethrough])


(defn markdown-pages [pages]
  (zipmap (map #(str/replace % #"\.md$" "") (keys pages))
          (map #(layout-base-header (md/to-html %)) (vals pages))))


(defn html-pages [pages]
  (zipmap (map #(str/replace % #"\.html$" "") (keys pages))
          (map #(layout-base-header %) (vals pages))))


(defn partial-pages [pages]
  (zipmap (keys pages)
          (map layout-base-header (vals pages))))

(defn home-page [pages]
  (zipmap (keys pages)
          (map #(layout-base-header %) (vals pages))))

(home-page (stasis/slurp-directory "resources/home" #".*\.(html|css|js)$"))


(defn get-pages []
  (stasis/merge-page-sources
   {:landing (home-page (stasis/slurp-directory "resources/home" #".*\.(html|css|js)$"))
    :posts  (html-pages (stasis/slurp-directory "resources/posts" #".*\.html$"))
    :partials (partial-pages (stasis/slurp-directory "resources/partials" #".*\.html$"))
    :markdown (markdown-pages (stasis/slurp-directory "resources/md" #".*\.md$"))}))

(def app (stasis/serve-pages get-pages))
#+END_SRC

and the website is working now!

** My header and footer
On my old Python-flask based static blog, I made a nav bar that I really liked. The source looks like this:

#+BEGIN_SRC html

<!DOCTYPE html>
<html lang="en">
    <head>
        
        <meta charset="utf-8">
        <title>Nicholas George</title>    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!--link to bootstrap css -->
        <link href="/static/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    </head>
    
    <body style="font-size: 16px">

        <!--navbar -->
        <nav class="navbar navbar-inverse">
            <div class="container-fluid">
                <div class="navbar-header">
                    <a class="navbar-brand" href="/"> Nick George</a>
                </div>
                <ul class="nav navbar-nav navbar-right">

                    <li class="inactive"><a href="/projects/">Projects</a></li>
                    <li class="inactive"><a href="/blog/">Posts</a></li>
                   <li class="inactive"><a href="/notes/">Notes</a></li> 
<li>
  <a href="https://github.com/nkicg6">
    <span class="fa fa-github" style="font-size:24px"></span>
     
  </a>
</li>
<li>
  <a href="https://twitter.com/NicholasMG">
    <span class="fa fa-twitter-square" style="font-size:24px"></span>
     
  </a>
</li>
                </ul>                        

            </div>
        </nav>
        <div class="container">
<!--content goes here-->            
    

<!--footer -->
            <footer class="footer">
                <div class="text-center">
                    <span class="text-muted">&copy 2017 Nicholas George</span>
                </div>
            </footer>
        </div>
    <script data-cfasync="false" src="/cdn-cgi/scripts/f2bf09f8/cloudflare-static/email-decode.min.js"></script></body>
</html>

#+END_SRC

I'll translate that to hiccup and add it to my base. This was relatively straightforward to translate to hiccup. I just had to figure out the nested list structure, but once you do it isn't so bad. 
Here is my new =layout-base-header= function with the hiccup. 

#+BEGIN_SRC clojure 
(defn layout-base-header [page]
  (html5
   [:head
    [:meta {:charset "utf-8"}]
    [:meta {:name "viewport"
            :content "width=device-width, initial-scale=1.0"}]
    [:link {:rel "stylesheet" :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" :integrity "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" :crossorigin "anonymous"}]
    [:link {:rel "stylesheet" :href "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"}]
    [:script {:src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" :integrity "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" :crossorigin "anonymous"}]]
   [:body
    [:nav {:class "navbar navbar-inverse"}
     [:div {:class "container-fluid"}
      [:div {:class "navbar-header"}
       (link-to  {:class "navbar-brand"} "/" "Nick George")]
      [:ul {:class "nav navbar-nav navbar-right"}
       [:li {:class "inactive"} (link-to "/" "Science")]
       [:li {:class "inactive"} (link-to "/" "Programming")]
       [:li {:class "inactive"} (link-to "/" "About")]
       [:li [:a {:href "https://github.com/nkicg6"}
             [:span {:class "fa fa-github" :style "font-size:24px"}]]]
       [:li [:a {:href "https://twitter.com/NicholasMG"}
             [:span {:class "fa fa-twitter-square" :style "font-size:24px"}]]]]]]
    [:div.logo "website-clj"]
    [:div.body page]
    [:footer {:class "footer"}
     [:div {:class "text-center"}
      [:span {:class "text-muted"} "&copy 2018 Nick George"]]]]))
#+END_SRC

I changed the section names and added dummy links for now, but the rest is a pretty straightforward translation. I am sure I am writing it in a non-compact way (i.e. it looks like classes under tags can be indicated as =.= attributes such as =[:div.logo "website-clj"]= expanding to =<div class="logo"> "website-clj"</div>), but this is working for me and it now renders like so:

[[file:img/with-header-footer.png]]

** Images and relative links
*** Images
Adding images is important to any site, and links too for that matter. How well do they work in this format?
I'll start with a sample screenshot of my part of my landing page with an annotation. 
The first thing I did was make a new directory in my =resources/= directory called static, which will contain =img=, =css=, and =js= directories. The directory structure now looks like this:
#+BEGIN_EXAMPLE
resources/
├── home
├── md
├── partials
├── posts
└── static
    ├── css
    ├── img
    └── js
#+END_EXAMPLE

Now I will test it by adding a simple html tag for image to the source for my langing page. 

#+BEGIN_EXAMPLE
<h1>This is the landing page</h1>
<p>
 Welcome to it.

Here is a test image:

 <img src="../static/img/sample-img.png" alt="sample img!" />
</p>

#+END_EXAMPLE

This doesnt work. Changing the source to =<img src ="sample-img.png"/>= and copying the image to the same folder as the landing page doesn't help... 

**** Optimus  
     Christian Johansen's blog post uses =optimus= to wrap static folders. I'll start by trying to serve bootstrap locally rather than linking to the CDN. 
     I played around with this for a few hours yesterday and couldn't figure it out. I understood things reasonably well until =Optimus=, which doesn't make much sense to me because I do not have a background in web development so I really cant understand what it is doing or why it is doing it. This is likely because I did not spend much time with the docs, but they use a lot of web-jargon and I don't have the time or will to jump into that now. 

     Luckily, I explored Christian Johansen's website a little more and came across /exactly/ what I needed ([[https://cjohansen.no/optimized-optimus-asset-paths-clojurescript/][here]]). 

*** Links

use (link-to)
** Publish
** Org-mode to html workflow

I write in Org-mode markup and plan to publish with org-publish, so I here I will figure out my workflow for this type of posting. 

** Git workflow
** One push publishing
* References
- [[https://github.com/magnars/stasis][Stasis]]
- [[https://github.com/yokolet/hiccup-samples][hiccup samples]]
- Christian Johansen's post on Building static sites in Clojure with Stasis https://cjohansen.no/building-static-sites-in-clojure-with-stasis/
